id: incorrect-optional-input-type
language: TypeScript
message: This input is optional, but the type for it does not include undefined.
severity: error
note: |
  Component inputs specified using the `@Input` decorator are optional by default.
  If they are not passed a value when used, they are passed `undefined`. To make them
  required, you set `@Input({ required: true })`.

  This rule is triggered if you do not specify the TS type correctly, do not provide
  a default value, or do not mark the input as required.

  To fix:

  * Add `| undefined` to the type of the input.
  * Add a default value to the input.
  * Make the input required.
  * Use the input signals API.

rule:
  kind: public_field_definition
  pattern: $FIELD
  not:
    has:
      field: value
      pattern: '$_'
  all:
    - has:
        kind: type_annotation
        not:
          has:
            kind: 'undefined'
            stopBy: end
  has:
    any:
      - pattern: '@Input()'
      - pattern: '@Input($$$_)'
    not:
      has:
        kind: pair
        all:
          - has:
              field: key
              regex: required
          - has:
              kind: 'true'
        stopBy: end
rewriters:
- id: add-required
  rule:
    pattern:
      context: 'class A { @Input() f }'
      selector: decorator
  fix: '@Input({ required: true })'
transform:
  NEW_FIELD: rewrite($FIELD, rewriters=[add-required])
fix:
  - title: add undefined to type
    template: $FIELD | undefined
  - title: add default value
    template: $FIELD = <VALUE>
  - title: make input required
    template: $NEW_FIELD
