id: no-constant-condition
valid:
- "if(a);"
- "if(a == 0);"
- "if(a = f());"
- "if(a += 1);"
- "if(a |= 1);"
- "if(a |= true);"
- "if(a |= false);"
- "if(a &= 1);"
- "if(a &= true);"
- "if(a &= false);"
- "if(a >>= 1);"
- "if(a >>= true);"
- "if(a >>= false);"
- "if(a >>>= 1);"
- "if(a ??= 1);"
- "if(a ??= true);"
- "if(a ??= false);"
- "if(a ||= b);"
- "if(a ||= false);"
- "if(a ||= 0);"
- "if(a ||= void 0);"
- "if(+(a ||= 1));"
- "if(f(a ||= true));"
- "if((a ||= 1) + 2);"
- "if(1 + (a ||= true));"
- "if(a ||= '' || false);"
- "if(a ||= void 0 || null);"
- "if((a ||= false) || b);"
- "if(a || (b ||= false));"
- "if((a ||= true) && b);"
- "if(a && (b ||= true));"
- "if(a &&= b);"
- "if(a &&= true);"
- "if(a &&= 1);"
- "if(a &&= 'foo');"
- "if((a &&= '') + false);"
- "if('' + (a &&= null));"
- "if(a &&= 1 && 2);"
- "if((a &&= true) && b);"
- "if(a && (b &&= true));"
- "if((a &&= false) || b);"
- "if(a || (b &&= false));"
- "if(a ||= b ||= false);"
- "if(a &&= b &&= true);"
- "if(a ||= b &&= false);"
- "if(a ||= b &&= true);"
- "if(a &&= b ||= false);"
- "if(a &&= b ||= true);"
- "if(1, a);"
- "if ('every' in []);"
# - "if (`\\\n${a}`) {}"
- "if (`${a}`);"
- "if (`${foo()}`);"
- "if (`${a === 'b' && b==='a'}`);"
- "if (`foo${a}` === 'fooa');"
- "if (tag`a`);"
- "if (tag`${a}`);"
- "if (+(a || true));"
- "if (-(a || true));"
- "if (~(a || 1));"
- "if (+(a && 0) === +(b && 0));"
- "while(~!a);"
- "while(a = b);"
- "while(`${a}`);"
- "for(;x < 10;);"
- "for(;;);"
- "for(;`${a}`;);"
- "do{ }while(x)"
- "q > 0 ? 1 : 2;"
- "`${a}` === a ? 1 : 2"
- "`foo${a}` === a ? 1 : 2"
- "tag`a` === a ? 1 : 2"
- "tag`${a}` === a ? 1 : 2"
- "while(x += 3) {}"
- "while(tag`a`) {}"
- "while(tag`${a}`) {}"
- "while(`\\\n${a}`) {}"

# #5228, typeof conditions
- "if(typeof x === 'undefined'){}"
- "if(`${typeof x}` === 'undefined'){}"
- "if(a === 'str' && typeof b){}"
- "typeof a == typeof b"
- "typeof 'a' === 'string'|| typeof b === 'string'"
- "`${typeof 'a'}` === 'string'|| `${typeof b}` === 'string'"

# #5726, void conditions
- "if (void a || a);"
- "if (a || void a);"

# #5693
- "if(xyz === 'str1' && abc==='str2'){}"
- "if(xyz === 'str1' || abc==='str2'){}"
- "if(xyz === 'str1' || abc==='str2' && pqr === 5){}"
- "if(typeof abc === 'string' && abc==='str2'){}"
- "if(false || abc==='str'){}"
- "if(true && abc==='str'){}"
- "if(typeof 'str' && abc==='str'){}"
- "if(abc==='str' || false || def ==='str'){}"
- "if(true && abc==='str' || def ==='str'){}"
- "if(true && typeof abc==='string'){}"

# #11181, string literals
- "if('str1' && a){}"
- "if(a && 'str'){}"

# #11306
- "if ((foo || true) === 'baz') {}"
- "if ((foo || 'bar') === 'baz') {}"
- "if ((foo || 'bar') !== 'baz') {}"
- "if ((foo || 'bar') == 'baz') {}"
- "if ((foo || 'bar') != 'baz') {}"
- "if ((foo || 233) > 666) {}"
- "if ((foo || 233) < 666) {}"
- "if ((foo || 233) >= 666) {}"
- "if ((foo || 233) <= 666) {}"
- "if ((key || 'k') in obj) {}"
- "if ((foo || {}) instanceof obj) {}"
- "if ((foo || 'bar' || 'bar') === 'bar');"
- "if ((foo || 1n) === 'baz') {}"
- "if (a && 0n || b);"
- "if(1n && a){};"

# #12225
- "if ('' + [y] === '' + [ty]) {}"
- "if ('a' === '' + [ty]) {}"
- "if ('' + [y, m, d] === 'a') {}"
- "if ('' + [y, 'm'] === '' + [ty, 'tm']) {}"
- "if ('' + [y, 'm'] === '' + ['ty']) {}"
- "if ([,] in\n\n($2))\n ;\nelse\n ;"
- "if ([...x]+'' === 'y'){}"

# { checkLoops: false }
- "while(true);"
- "for(;true;);"
- "do{}while(true)"

- "function* foo(){while(true){yield 'foo';}}"
- "function* foo(){for(;true;){yield 'foo';}}"
- "function* foo(){do{yield 'foo';}while(true)}"
- "function* foo(){while (true) { while(true) {yield;}}}"
- "function* foo() {for (; yield; ) {}}"
- "function* foo() {for (; ; yield) {}}"
- "function* foo() {while (true) {function* foo() {yield;}yield;}}"
- "function* foo() { for (let x = yield; x < 10; x++) {yield;}yield;}"
- "function* foo() { for (let x = yield; ; x++) { yield; }}"
- "if (new Number(x) + 1 === 2) {}"

# #15467
- "if([a]==[b]) {}"
- "if (+[...a]) {}"
- "if (+[...[...a]]) {}"
- "if (`${[...a]}`) {}"
- "if (`${[a]}`) {}"
- "if (+[a]) {}"
- "if (0 - [a]) {}"
- "if (1 * [a]) {}"

# Boolean function
- "if (Boolean(a)) {}"
- "if (Boolean(...args)) {}"
- "if (foo.Boolean(1)) {}"
- "function foo(Boolean) { if (Boolean(1)) {} }"
- "const Boolean = () => {}; if (Boolean(1)) {}"
# - "const undefined = 'lol'; if (undefined) {}"
# { code: "if (Boolean()) {}", globals: { Boolean: "off" } }
# { code: "if (undefined) {}", globals: { undefined: "off" } }

invalid:
# - "for(;true;);"
# - "for(;``;);"
# - "for(;`foo`;);"
# - "for(;`foo${bar}`;);"
# - "do{}while(true)"
# - "do{}while('1')"
# - "do{}while(0)"
# - "do{}while(t = -2)"
# - "do{}while(``)"
# - "do{}while(`foo`)"
# - "do{}while(`foo${bar}`)"
- "true ? 1 : 2;"
- "1 ? 1 : 2;"
- "q = 0 ? 1 : 2;"
- "(q = 0) ? 1 : 2;"
- "`` ? 1 : 2;"
- "`foo` ? 1 : 2;"
- "`foo${bar}` ? 1 : 2;"
- "if(-2);"
- "if(true);"
- "if(1);"
- "if({});"
- "if(0 < 1);"
- "if(0 || 1);"
- "if(a, 1);"
- "if(`foo`);"
- "if(``);"
- "if(`\\\n`);"
# - "if(`${'bar'}`);"
# - "if(`${'bar' + `foo`}`);"
- "if(`foo${false || true}`);"
- "if(`foo${0 || 1}`);"
- "if(`foo${bar}`);"
- "if(`${bar}foo`);"
# - "if(!(true || a));"
# - "if(!(a && void b && c));"
# - "if(0 || !(a && null));"
# - "if(1 + !(a || true));"
# - "if(!(null && a) > 1);"
# - "if(+(!(a && 0)));"
# - "if(!typeof a === 'string');"
# - "if(-('foo' || a));"
# - "if(+(void a && b) === ~(1 || c));"
# - "if(a ||= true);"
# - "if(a ||= 5);"
# - "if(a ||= 'foo' || b);"
# - "if(a ||= b || /regex/);"
# - "if(a ||= b ||= true);"
# - "if(a ||= b ||= c || 1);"
# - "if(!(a ||= true));"
# - "if(!(a ||= 'foo') === true);"
# - "if(!(a ||= 'foo') === false);"
# - "if(a || (b ||= true));"
# - "if((a ||= 1) || b);"
# - "if((a ||= true) && true);"
# - "if(true && (a ||= true));"
# - "if(a &&= false);"
# - "if(a &&= null);"
# - "if(a &&= void b);"
# - "if(a &&= 0 && b);"
# - "if(a &&= b && '');"
# - "if(a &&= b &&= false);"
# - "if(a &&= b &&= c && false);"
# - "if(!(a &&= false));"
# - "if(!(a &&= 0) + 1);"
# - "if(a && (b &&= false));"
# - "if((a &&= null) && b);"
# - "if(false || (a &&= false));"
# - "if((a &&= false) || false);"

# - "while([]);"
# - "while(~!0);"
# - "while(x = 1);"
# - "while(function(){});"
# - "while(true);"
# - "while(1);"
# - "while(() => {});"
# - "while(`foo`);"
# - "while(``);"
# - "while(`${'foo'}`);"
# - "while(`${'foo' + 'bar'}`);"

# #5228 , typeof conditions
- "if(typeof x){}"
- "if(typeof 'abc' === 'string'){}"
- "if(a = typeof b){}"
- "if(a, typeof b){}"
- "if(typeof 'a' == 'string' || typeof 'b' == 'string'){}"
# - "while(typeof x){}"

# #5726, void conditions
# - "if(1 || void x);"
# - "if(void x);"
# - "if(y = void x);"
# - "if(x, void x);"
# - "if(void x === void y);"
# - "if(void x && a);"
# - "if(a && void x);"

# #5693
# - "if(false && abc==='str'){}"
# - "if(true || abc==='str'){}"
# - "if(1 || abc==='str'){}"
# - "if(abc==='str' || true){}"
# - "if(abc==='str' || true || def ==='str'){}"
# - "if(false || true){}"
# - "if(typeof abc==='str' || true){}"

# #11181, string literals
- "if('str' || a){}"
- "if('str' || abc==='str'){}"
- "if('str1' || 'str2'){}"
- "if('str1' && 'str2'){}"
# - "if(abc==='str' || 'str'){}"
# - "if(a || 'str'){}"

# - "function* foo(){while(true){} yield 'foo';}"
# - "function* foo(){while(true){if (true) {yield 'foo';}}}"
# - "function* foo(){while(true){yield 'foo';} while(true) {}}"
# - "var a = function* foo(){while(true){} yield 'foo';}"
# - "while (true) { function* foo() {yield;}}"
- "function* foo(){if (true) {yield 'foo';}}"
# - "function foo() {while (true) {function* bar() {while (true) {yield;}}}}"
# - "function foo() {while (true) {const bar = function*() {while (true) {yield;}}}}"
# - "function* foo() {for (let foo = yield; true;) {}}"
# - "function* foo() {for (foo = yield; true;) {}}"
# - "function* foo() { for (let foo = 1 + 2 + 3 + (yield); true; baz) {}}"

# #12225
- "if([a]) {}"
- "if([]) {}"
# - "if(''+['a']) {}"
# - "if(''+[]) {}"
# - "if(+1) {}"
# - "if ([,] + ''){}"

# #13238
- "if(/foo/ui);"
- "if(0n);"
- "if(0b0n);"
- "if(0o0n);"
- "if(0x0n);"
- "if(0b1n);"
- "if(0o1n);"
- "if(0x1n);"
- "if(0x1n || foo);"

# Classes and instances are always truthy
- "if(class {}) {}"
- "if(new Foo()) {}"

# Boxed primitives are always truthy
- "if(new Boolean(foo)) {}"
- "if(new String(foo)) {}"
- "if(new Number(foo)) {}"

# Spreading a constant array
# - "if(`${[...['a']]}`) {}"
